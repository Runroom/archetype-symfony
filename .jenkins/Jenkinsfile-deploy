def slackResponse = slackSend(color: 'warning', message: "In Progress - ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\n${BRANCH}")

pipeline {
    agent any

    environment {
        CREDENTIALS = credentials('github-jenkins-write-packages')
        DOCKER_USERNAME = "$CREDENTIALS_USR"
        DOCKER_PASSWORD = "$CREDENTIALS_PSW"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        disableResume()
    }

    stages {
        stage('Deploy') {
            agent {
                docker {
                    image 'runroom/kamal'
                    args '--user jenkins'
                    reuseNode true
                }
            }

            steps {
                sh 'sed -i "s/SSH_USER/$SSH_USER/g" .kamal/deploy.yml'
                sh 'sed -i "s/SSH_HOST/$SSH_HOST/g" .kamal/deploy.yml'

                sh 'mkdir --parents ~/.ssh'
                sh 'echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts'
                sh 'chmod 600 ~/.ssh/known_hosts'

                sshagent([SSH_CREDENTIALS]) {
                    sh 'kamal deploy --config-file .kamal/deploy.yml --version $TAG --skip-push'
                }
            }
        }
    }

    post {
        always { cleanWs() }
        failure { slackSend(channel: slackResponse.channelId, color: 'danger', message: "Failed - ${env.JOB_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
        success { slackSend(channel: slackResponse.channelId, color: 'good', message: "Success - ${env.JOB_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
    }
}
