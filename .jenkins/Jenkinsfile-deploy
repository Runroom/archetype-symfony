#!groovy

def slackResponse = slackSend(color: 'warning', message: "In Progress - ${JOB_NAME} #${BUILD_NUMBER} (<${BUILD_URL}|Open>)\n${BRANCH}")

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        disableResume()
    }

    stages {
        stage('Deploy') {
            agent {
                docker {
                    image 'runroom/kamal'
                    args '--user jenkins'
                    reuseNode true
                }
            }

            steps {
                sh 'sed -i "s/SSH_USER/$SSH_USER/g" .kamal/deploy.$ENVIRONMENT.yml'
                sh 'sed -i "s/SSH_HOST/$SSH_HOST/g" .kamal/deploy.$ENVIRONMENT.yml'

                sh 'mkdir --parents ~/.ssh'
                sh 'echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts'
                sh 'chmod 600 ~/.ssh/known_hosts'

                withCredentials([usernamePassword(
                    credentialsId: DOCKER_CREDENTIALS,
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sshagent([SSH_CREDENTIALS]) {
                        sh 'kamal deploy --config-file .kamal/deploy.yml --version $TAG --destination $ENVIRONMENT --skip-push'
                    }
                }
            }
        }
    }

    post {
        always { cleanWs() }
        failure { slackSend(channel: slackResponse.channelId, color: 'danger', message: "Failed - ${JOB_NAME} - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
        success { slackSend(channel: slackResponse.channelId, color: 'good', message: "Success - ${JOB_NAME} - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
    }
}
