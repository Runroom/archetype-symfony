def slackResponse = slackSend(color: 'warning', message: "In Progress - ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\n${BRANCH}")

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        disableResume()
    }

    stages {
        stage('Build Frontend Assets') {
            agent {
                docker {
                    image 'runroom/node18'
                    args '-v $HOME/npm:/home/node/.npm:z'
                    reuseNode true
                }
            }

            steps {
                sh 'npm clean-install'
                sh 'npm run build'
            }
        }

        stage('Deploy') {
            agent {
                docker {
                    image 'runroom/php8.2-cli'
                    args '-v $HOME/composer:/home/jenkins/.composer:z'
                    reuseNode true
                }
            }

            steps {
                sh 'composer install --no-progress --no-interaction'
                sh 'mkdir --parents ~/.ssh'
                sh 'echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts'
                sh 'chmod 600 ~/.ssh/known_hosts'

                sshagent([env.DEPLOYER_CREDENTIALS]) {
                    sh 'php vendor/bin/dep deploy $ENVIRONMENT --branch=$BRANCH --no-interaction -vv'
                }
            }
        }
    }

    post {
        always { cleanWs() }
        failure { slackSend(channel: slackResponse.channelId, color: 'danger', message: "Failed - ${env.JOB_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
        success { slackSend(channel: slackResponse.channelId, color: 'good', message: "Success - ${env.JOB_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${BRANCH}", timestamp: slackResponse.ts) }
    }
}
