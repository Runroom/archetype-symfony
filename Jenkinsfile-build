#!groovy

FOLDER_NAME = env.JOB_NAME.split('/')[0]

pipeline {
    agent any

    environment {
        APP_ENV = 'test'
        DOCKER_BUILDKIT = 1
        DOCKER_REGISTRY = 'ghcr.io'
        CLEAN_BRANCH_NAME = env.BRANCH_NAME.replace('/', '-')
        SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds(abortPrevious: true)
        disableResume()
    }

    stages {
        stage('Build') {
            when {
                anyOf {
                    changeRequest()
                    branch 'main'
                }
            }

            steps {
                script {
                    def app = docker.build(
                        'ghcr.io/runroom/archetype-symfony',
                        '--target app-prod --file .docker/Dockerfile .'
                    )

                    docker.withRegistry(DOCKER_REGISTRY, DOCKER_REGISTRY_AUTH) {
                        app.push("jenkins-sha-${SHORT_COMMIT}")

                        if (env.BRANCH_NAME == 'main') {
                            app.push('jenkins-main')
                            app.push('jenkins-latest')
                        }

                        if (env.CHANGE_ID) {
                            app.push("jenkins-pr-${env.CHANGE_ID}")
                        }
                    }
                }
            }
        }

        // stage('Continuous Deployment - Production') {
        //     when { branch 'main' }
        //     steps {
        //         build job: "${FOLDER_NAME}/Production Deploy", wait: false
        //     }
        // }
    }

    post {
        always { cleanWs deleteDirs: true, patterns: [
            [pattern: '**/.cache/**', type: 'EXCLUDE'],
            [pattern: 'node_modules', type: 'EXCLUDE']
        ] }
        fixed { slackSend(color: 'good', message: "Fixed - ${FOLDER_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${env.BRANCH_NAME}")}
        failure { slackSend(color: 'danger', message: "Failed - ${FOLDER_NAME} - ${env.BUILD_DISPLAY_NAME} (<${env.BUILD_URL}|Open>)\n${env.BRANCH_NAME}") }
    }
}
